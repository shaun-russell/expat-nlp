<?xml version="1.0" encoding="UTF-8"?>
<!--
  EXPAT Template Description

  Structural Hierarchy:
> root
  > patterngroup
    > pattern
      > word
      > group
        > word
        > word
        > ...
      > word
      > ...
    > ...


  Notes:
  - A * on it's own matches anything.
  - The star can be used to match anything starting with a character, so
    VB* matches VBD, VBG and VBZ. *S would match NNS and NNPS.
  - A missing attribute is like a * in most cases. The assumption is that
    if the attibute was not specified, skip all the associated checks.

  Elements and Attributes:
    <root>
    # Root element. Some version in the future may add other elements that
    # aren't patterns, so <patterngroup> is not the root element.
    - version : float/string
      # e.g. 1.0.
      # This would let the XML interpreter/parser know what elements and
      # structure we are looking for (in a standardised way).
  
    <patterngroup>
    # Only one of these. Container element for patterns.
    - label : string
      # An optional attribute that helps in arranging and debugging.
      # If using multiple files, this allows groups to have a different
      # label to tell them apart.
  
    <pattern>
    # A collection of words that make up a pattern.
    - name : string
      # The unique name of the pattern.
    - description : string
      # A short description or more detailed name of what the pattern is.
    - class : string
      # The class/category that the pattern belongs to, i.e. 'noun-group' or 'prp-phrase'
    - priority : numeric
      # Allows patterns to be ordered or sorted based on

    <word>
    # An item that matches N words that meet its criteria.
    - min : numeric
      # The minimum number of tokens that this word should match.
    - max : numeric
      # The maximum number of tokens that this word should match.

    - pos : string
      # The part(s) of speech to match. Multiple values are comma-delimited.
      # Supports * character.
    - expos : string
      # Parts of speech to exclude. Easier to specify a few in here rather than
      # specify dozens in the allowed.
    
    - deps : string
      # The dependencies to match. Multiple values are comma-delimited.
      # Supports * character.
    - exdeps : string
      # The dependencies to exclude. Multiple values are comma-delimited.
      # Supports * character.
    - depnum : numeric
      # The required number of dependencies. If 2 dependencies are specified,
      # a depnum of 1 would be a logical OR while a depnum of 2 would be a logical AND.
      # A depnum of 0 is a logical XOR (the default is 1 when not specified).

    - type : string
      # The word types or categories that the word belongs to. Multiple values
      # are comma-delimited. Supports * character.
    - extype: string
      # The word types or categories to exclude. Multiple values are comma-delimited.
      # Supports * character.
    - typenum : string
      # The number of types or categories the word needs to belong to. If 2, the
      # word must have 2 of the required types (and none of the excluded types if 
      # applicable) for it to match.
    
    - contextual : boolean
      # If True, the word is needed to match the pattern but it is not part of
      # the pattern itself, e.g. to match an adjective that precedes a noun,
      # the adjective is what the pattern should find, but it also needs to find
      # the noun for the pattern to be correct. Therefore, we add the noun to the
      # pattern, but mark it as contextual.
      # Default is False, which means the word is essential to the pattern.

    - lemma and word : string
      # Match lemmas and/or words. Not recommended except in very rare cases
      # because it's not flexible and has the same disadvantages of hardcoded values.
      # Supports the * character.

    - label : string
      # Descriptive metadata for a word. Non-operative.

    
    <group>
    # The group element is a container to allow sequences of words (or groups)
    # to be matched.
    - min : number
      # The minimum number of items in this group to match
    - max : number
      # The maximum number of items in this group to match.
  
-->
<root version="1.0">
  <patterngroup label="basic">
    <pattern name="named pattern" class="examples" description="for example purposes" priority="7"> 
      <!-- Find a word whose PoS begins with NN but isn't a plural, and is of type TXE or HGH -->
      <word pos="NN*" expos="*S" type="TXE,HGH"/>

      <!-- Optional preposition -->
      <word pos="IN" min="0" max="1" label="optional preposition" />

      <!-- Find a word that is either (but not both) of the following -->
      <group min="1" max="1">
        <!-- Verb or adverb, not TFL type and not an amod dependency -->
        <word pos="VB*,RB" extype="TFL" exdep="amod"/>

        <!-- Any part of speech and either nsubj and/or dobj -->
        <word pos="*" deps="nsubj,dobj" depnum="1"/>
      </group>
    </pattern>

    <!-- Find up to 3 adjectives that are preceded by a noun, but the noun
         is only for contextual purposes. -->
    <pattern name="3JJ-NN">
      <word pos='JJ*' max="3"/>
      <word pos='NN*' contextual='True'/>
    </pattern>

    <!-- Match 'gone' preceded by lemmas of anything starting with 'toast', and 'be' -->
    <pattern name="be-gone">
      <word lemma="toast*" />
      <word lemma="be" />
      <word word="gone" />
    </pattern>
  </patterngroup>
</root>

